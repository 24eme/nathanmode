<?php

/**
 * CollectionLivraison
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    nathanmode
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CollectionLivraison extends BaseCollectionLivraison
{
    public function getPath($name, $absolute = false) {
        if($this->$name) {
            
            return FactureTable::getInstance()->getUploadPath($absolute).$this->$name;
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
    	if ($facture = $this->getFacture()) {
    		$facture->delete();
    	}
        parent::delete($conn);

        $this->removeFile('fichier');
        $this->removeFile('packing_list');
    }

    protected function removeFile($name) {
        if (!$this->$name) {

            return;
        }

        $path = $this->getPath($name, true);

        if(is_file($path)) {
            unlink($path);
        }
    }
    
  public function save(Doctrine_Connection $conn = null)
  {
  	$facture = $this->updateFacture();
 	$facture->save();
 	$this->setFactureId($facture->getId());
 	$this->setFacture($facture);
    return parent::save($conn);
  }
  
  public function updateFacture()
  {
  	$facture = ($this->isNew())? new Facture() : $this->getFacture();
  	if ($this->isNew()) {
  		$facture->setActif(true);
  	}
  	$facture->setSaisonId($this->getCollection()->getSaisonId());
    $facture->setFournisseurId($this->getCollection()->getFournisseurId());
    $facture->setCommercialId($this->getCollection()->getCommercialId());
    $facture->setClientId($this->getCollection()->getClientId());
    $facture->setDeviseMontantId($this->getDeviseId());
    $facture->setDeviseFournisseurId($this->getCollection()->getDeviseFournisseurId());
    $facture->setDeviseCommercialId($this->getCollection()->getDeviseCommercialId());
    if ($this->getCollection()->getPrixFournisseur() != "" || $this->getCollection()->getDeviseFournisseurId() != Devise::POURCENTAGE_ID)
    	$facture->setPrixFournisseur($this->getCollection()->getPrixFournisseur());
    else {
    	$facture->setPrixFournisseur($this->getCollection()->getFournisseur()->getCommission());
    	$facture->setDeviseFournisseurId($this->getCollection()->getFournisseur()->getDeviseId());
    }
    if ($this->getCollection()->getPrixCommercial() != "" || $this->getCollection()->getDeviseCommercialId() != Devise::POURCENTAGE_ID)
    	$facture->setPrixCommercial($this->getCollection()->getPrixCommercial());
    else {
    	$facture->setPrixCommercial($this->getCollection()->getCommercial()->getCommission());
    	$facture->setDeviseCommercialId($this->getCollection()->getCommercial()->getDeviseId());
    }
    $facture->setNumero($this->getNumFacture());
    if ($this->getDate()) {
    	$facture->setDate($this->getDate());
    	$dt = $this->getDateTimeObject('date');
    	$dt->modify('+'.Paiements::getNbJoursByStatut($this->getCollection()->getPaiement()).' day');
    	$facture->setEcheance($dt->format('Y-m-d'));
    	if (str_replace('-', '', $facture->getEcheance()) > date('Ymd') && $facture->getStatut() == StatutsFacture::KEY_NON_PAYEE) {
    		$facture->setStatut(StatutsFacture::KEY_NON_PAYEE);
    	}
    }
    $montant = $this->getMetrage() * $this->getPrix();
    $facture->setMontantTotal($montant);
    if ($escompte = $this->getEscompte()) {
    	$facture->setEscompte($escompte);
    	$facture->setDeviseEscompte($this->getEscompteDevise());
    	$facture->setDeviseEscompteId($this->getEscompteDeviseId());
    	if ($this->getEscompteDevise() && $this->getEscompteDevise()->getSymbole() == Devise::POURCENTAGE) {
    		try {
    			$montant = $montant - $montant * $escompte / 100;
    		} catch (Exception $e) {}
    	} else {
    		$montant = $montant - $escompte;
    	}
    }
    $facture->setMontant($montant);
    $facture->setMetrage($this->getMetrage());
    $facture->setQualite($this->getCollection()->getQualite());
    $facture->setFichier($this->getFichier());
    if ($this->isNew()) {
		$facture->setStatut(StatutsFacture::KEY_NON_PAYEE);
    }
    if ($this->getCollection()->getProduction())
    	$facture->setRelation(Facture::TYPE_PRODUCTION);
    else
    	$facture->setRelation(Facture::TYPE_COLLECTION);
    
    if ($this->getCollection()->getDeviseFournisseur() && $this->getCollection()->getDeviseFournisseur()->getSymbole() == Devise::POURCENTAGE) {
    	try {
    		$facture->setTotalFournisseur($this->getMetrage() * $this->getPrix() * $facture->getPrixFournisseur() / 100);
    	} catch (Exception $e) {
    		$facture->setTotalFournisseur(0);
    	}
    } else {
    	$facture->setTotalFournisseur($this->getCollection()->getPrixFournisseur());
    }
    
    if ($this->getCollection()->getDeviseCommercial() && $this->getCollection()->getDeviseCommercial()->getSymbole() == Devise::POURCENTAGE) {
    	try {
    		$facture->setTotalCommercial($this->getMetrage() * $this->getPrix() * $facture->getPrixCommercial() / 100);
    	} catch (Exception $e) {
    		$facture->setTotalCommercial(0);
    	}
    } else {
    	$facture->setTotalCommercial($this->getCollection()->getPrixCommercial());
    }
    return $facture;
  }
}
