<?php

/**
 * BaseCollectionDetail
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $collection_id
 * @property integer $devise_id
 * @property integer $commande_id
 * @property string $colori
 * @property string $metrage
 * @property string $piece_categorie
 * @property string $piece
 * @property double $prix
 * @property string $image
 * @property Collection $Collection
 * @property Devise $Devise
 * @property Commande $Commande
 * 
 * @method integer          getCollectionId()    Returns the current record's "collection_id" value
 * @method integer          getDeviseId()        Returns the current record's "devise_id" value
 * @method integer          getCommandeId()      Returns the current record's "commande_id" value
 * @method string           getColori()          Returns the current record's "colori" value
 * @method string           getMetrage()         Returns the current record's "metrage" value
 * @method string           getPieceCategorie()  Returns the current record's "piece_categorie" value
 * @method string           getPiece()           Returns the current record's "piece" value
 * @method double           getPrix()            Returns the current record's "prix" value
 * @method string           getImage()           Returns the current record's "image" value
 * @method double           getPrixAchat()       Returns the current record's "prix achat" value
 * @method double           getPrixPublic()      Returns the current record's "prix public" value
 * @method double           getPartFrais()       Returns the current record's "part frais" value
 * @method double           getPartMarge()       Returns the current record's "part marge" value
 * @method double           getPartCommission()  Returns the current record's "part commission" value
 * @method Collection       getCollection()      Returns the current record's "Collection" value
 * @method Devise           getDevise()          Returns the current record's "Devise" value
 * @method Commande         getCommande()        Returns the current record's "Commande" value
 * @method CollectionDetail setCollectionId()    Sets the current record's "collection_id" value
 * @method CollectionDetail setDeviseId()        Sets the current record's "devise_id" value
 * @method CollectionDetail setCommandeId()      Sets the current record's "commande_id" value
 * @method CollectionDetail setColori()          Sets the current record's "colori" value
 * @method CollectionDetail setMetrage()         Sets the current record's "metrage" value
 * @method CollectionDetail setPieceCategorie()  Sets the current record's "piece_categorie" value
 * @method CollectionDetail setPiece()           Sets the current record's "piece" value
 * @method CollectionDetail setPrix()            Sets the current record's "prix" value
 * @method CollectionDetail setImage()           Sets the current record's "image" value
 * @method CollectionDetail setPrixAchat()       Sets the current record's "prix achat" value
 * @method CollectionDetail setPrixPublic()      Sets the current record's "prix public" value
 * @method CollectionDetail setPartFrais()       Sets the current record's "part frais" value
 * @method CollectionDetail setPartMarge()       Sets the current record's "part marge" value
 * @method CollectionDetail setPartCommission()  Sets the current record's "part commission" value
 * @method CollectionDetail setCollection()      Sets the current record's "Collection" value
 * @method CollectionDetail setDevise()          Sets the current record's "Devise" value
 * @method CollectionDetail setCommande()        Sets the current record's "Commande" value
 *
 * @package    nathanmode
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCollectionDetail extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('collection_detail');
        $this->hasColumn('collection_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('devise_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('commande_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('colori', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('metrage', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('piece_categorie', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('piece', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('prix', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('image', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('prix_achat', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('prix_public', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('part_frais', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('part_marge', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('part_commission', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('date_livraison_prevue', 'date', null, array(
             'type' => 'date',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Collection', array(
             'local' => 'collection_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Devise', array(
             'local' => 'devise_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Commande', array(
             'local' => 'commande_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));
    }
}