<?php

/**
 * BaseFournisseur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $devise_id
 * @property string $raison_sociale
 * @property string $prenom
 * @property string $telephone
 * @property string $adresse
 * @property string $code_postal
 * @property string $ville
 * @property double $commission
 * @property Devise $Devise
 * @property Doctrine_Collection $Coupes
 * @property Doctrine_Collection $LabDips
 * @property Doctrine_Collection $PrixSpeciaux
 * @property Doctrine_Collection $Collections
 * @property Doctrine_Collection $Bons
 * @property Doctrine_Collection $Commandes
 * 
 * @method integer             getDeviseId()       Returns the current record's "devise_id" value
 * @method string              getRaisonSociale()  Returns the current record's "raison_sociale" value
 * @method string              getPrenom()         Returns the current record's "prenom" value
 * @method string              getTelephone()      Returns the current record's "telephone" value
 * @method string              getAdresse()        Returns the current record's "adresse" value
 * @method string              getCodePostal()     Returns the current record's "code_postal" value
 * @method string              getVille()          Returns the current record's "ville" value
 * @method double              getCommission()     Returns the current record's "commission" value
 * @method Devise              getDevise()         Returns the current record's "Devise" value
 * @method Doctrine_Collection getCoupes()         Returns the current record's "Coupes" collection
 * @method Doctrine_Collection getLabDips()        Returns the current record's "LabDips" collection
 * @method Doctrine_Collection getPrixSpeciaux()   Returns the current record's "PrixSpeciaux" collection
 * @method Doctrine_Collection getCollections()    Returns the current record's "Collections" collection
 * @method Doctrine_Collection getBons()           Returns the current record's "Bons" collection
 * @method Doctrine_Collection getCommandes()      Returns the current record's "Commandes" collection
 * @method Fournisseur         setDeviseId()       Sets the current record's "devise_id" value
 * @method Fournisseur         setRaisonSociale()  Sets the current record's "raison_sociale" value
 * @method Fournisseur         setPrenom()         Sets the current record's "prenom" value
 * @method Fournisseur         setTelephone()      Sets the current record's "telephone" value
 * @method Fournisseur         setAdresse()        Sets the current record's "adresse" value
 * @method Fournisseur         setCodePostal()     Sets the current record's "code_postal" value
 * @method Fournisseur         setVille()          Sets the current record's "ville" value
 * @method Fournisseur         setCommission()     Sets the current record's "commission" value
 * @method Fournisseur         setDevise()         Sets the current record's "Devise" value
 * @method Fournisseur         setCoupes()         Sets the current record's "Coupes" collection
 * @method Fournisseur         setLabDips()        Sets the current record's "LabDips" collection
 * @method Fournisseur         setPrixSpeciaux()   Sets the current record's "PrixSpeciaux" collection
 * @method Fournisseur         setCollections()    Sets the current record's "Collections" collection
 * @method Fournisseur         setBons()           Sets the current record's "Bons" collection
 * @method Fournisseur         setCommandes()      Sets the current record's "Commandes" collection
 * 
 * @package    nathanmode
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFournisseur extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('fournisseur');
        $this->hasColumn('devise_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('raison_sociale', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('prenom', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('telephone', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('adresse', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('code_postal', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             ));
        $this->hasColumn('ville', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('commission', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('emails', 'text', null, array(
             'type' => 'text',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Devise', array(
             'local' => 'devise_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Coupe as Coupes', array(
             'local' => 'id',
             'foreign' => 'fournisseur_id'));

        $this->hasMany('LabDip as LabDips', array(
             'local' => 'id',
             'foreign' => 'fournisseur_id'));

        $this->hasMany('PrixSpecial as PrixSpeciaux', array(
             'local' => 'id',
             'foreign' => 'fournisseur_id'));

        $this->hasMany('Collection as Collections', array(
             'local' => 'id',
             'foreign' => 'fournisseur_id'));

        $this->hasMany('Bon as Bons', array(
             'local' => 'id',
             'foreign' => 'fournisseur_id'));

        $this->hasMany('Commande as Commandes', array(
             'local' => 'id',
             'foreign' => 'fournisseur_id'));
    }
}