<?php

/**
 * CollectionDetail
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    nathanmode
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CollectionDetail extends BaseCollectionDetail
{

    public function __toString()
    {
        
        return sprintf("%s / %s / %s", $this->colori, $this->metrage, $this->prix); 
    }

    public function delete(Doctrine_Connection $conn = null)
    {
    	if ($commande = $this->getCommande()) {
    		$commande->delete();
    	}
        parent::delete($conn);
    }

  public function save(Doctrine_Connection $conn = null)
  {
  	$commande = $this->updateCommande();
 	$commande->save();
 	$this->setCommandeId($commande->getId());
 	$this->setCommande($commande);




    $this->updateResteALivrerProduit();
    return parent::save($conn);
  }

  public function getDeviseFournisseurId() {
    if ($this->getCollection()->getPrixFournisseur() == "" && $this->getCollection()->getDeviseFournisseurId() == Devise::POURCENTAGE_ID) {

      return $this->getCollection()->getFournisseur()->getDeviseId();
    }

    return $this->getCollection()->getDeviseFournisseurId();
  }

  public function getPrixFournisseur() {
    if($this->getCollection()->getDeviseFournisseurId() == Devise::POURCENTAGE_AUTOMATIQUE_MARGE_ID) {

        return round(100 - ($this->getPrixAchat() * 100 / $this->getPrixVente()), 2);
    }

    if ($this->getCollection()->getPrixFournisseur() == "" && $this->getCollection()->getDeviseFournisseurId() == Devise::POURCENTAGE_ID) {

      return $this->getCollection()->getFournisseur()->getCommission();
    }

    return $this->getCollection()->getPrixFournisseur();
  }

  public function updateCommande()
  {
  	$commande = ($this->isNew())? new Commande() : $this->getCommande();
  	$commande->setSaisonId($this->getCollection()->getSaisonId());
    $commande->setFournisseurId($this->getCollection()->getFournisseurId());
    $commande->setCommercialId($this->getCollection()->getCommercialId());
    $commande->setClientId($this->getCollection()->getClientId());
    $commande->setDeviseMontantId($this->getDeviseId());
    $commande->setDeviseFournisseurId($this->getDeviseFournisseurId());
    $commande->setDeviseCommercialId($this->getCollection()->getDeviseCommercialId());
    $commande->setPrixFournisseur($this->getPrixFournisseur());

    if ($this->getCollection()->getPrixCommercial() != "" || $this->getCollection()->getDeviseCommercialId() != Devise::POURCENTAGE_ID) {
    	$commande->setPrixCommercial($this->getCollection()->getPrixCommercial());
    } else {
    	$commande->setPrixCommercial($this->getCollection()->getCommercial()->getCommission());
    	$commande->setDeviseCommercialId($this->getCollection()->getCommercial()->getDeviseId());
    }
    $commande->setNumero($this->getCollection()->getNumCommande());
    $commande->setDate($this->getCollection()->getDateCommande());
	$commande->setColori($this->getColori());
    $commande->setMetrage($this->getMetrage());
    $commande->setPieceCategorie($this->getPieceCategorie());
    $commande->setPiece($this->getPiece());
    if ($this->getPiece()) {
    	$commande->setMontant($this->getPiece() * $this->getPrix());
    } else {
    	$commande->setMontant($this->getMetrage() * $this->getPrix());
    }
    $commande->setQualite($this->getCollection()->getQualite());
    $commande->setSituation($this->getCollection()->getSituation());
    if ($this->getCollection()->getProduction())
    	$commande->setRelation(Commande::TYPE_PRODUCTION);
    else
    	$commande->setRelation(Commande::TYPE_COLLECTION);

    if ($this->getCollection()->getDeviseFournisseur()->isPourcentage()) {
    	try {
    		if ($this->getPiece()) {
    			$commande->setTotalFournisseur($this->getPiece() * $this->getPrix() * $commande->getPrixFournisseur() / 100);
    		} else {
    			$commande->setTotalFournisseur($this->getMetrage() * $this->getPrix() * $commande->getPrixFournisseur() / 100);
    		}
    	} catch (Exception $e) {
    		$commande->setTotalFournisseur(0);
    	}
    } else {
    	$commande->setTotalFournisseur($this->getCollection()->getPrixFournisseur());
    }

    if ($this->getCollection()->getDeviseCommercial()->isPourcentage()) {
    	try {
    		if ($this->getPiece()) {
    			$commande->setTotalCommercial($this->getPiece() * $this->getPrix() * $commande->getPrixCommercial() / 100);
    		} else {
    			$commande->setTotalCommercial($this->getMetrage() * $this->getPrix() * $commande->getPrixCommercial() / 100);
    		}
    	} catch (Exception $e) {
    		$commande->setTotalCommercial(0);
    	}
    } else {
    	$commande->setTotalCommercial($this->getCollection()->getPrixCommercial());
    }
    return $commande;
  }

  public function getSaison() {
    return $this->getCollection()->getSaison();
  }

  public function getFournisseur() {
    return $this->getCollection()->getFournisseur();
  }

  public function getClient() {
    return $this->getCollection()->getClient();
  }

  public function getDateCommande() {
    return $this->getCollection()->getDateCommande();
  }

  public function getNumCommande() {
    return $this->getCollection()->getNumCommande();
  }

  public function getDateLivraison() {
    return $this->getCollection()->getDateLivraison();
  }

  public function getSituation() {
    return $this->getCollection()->getSituation();
  }

  public function getQualite() {
    return $this->getCollection()->getQualite();
  }


  public function updateResteALivrerProduit() {
        $livraisons = $this->getCollection()->getCollectionLivraisons();

        $resteALivrerProduit = $this->getPiece() ?: $this->getMetrage();

        if ($livraisons) {
            foreach ($livraisons as $livraison) {
                if ($livraison->getColori() === $this->getColori()){
                    $quantiteLivraison = $livraison->getPiece() ?: $livraison->getMetrage();
                    $resteALivrerProduit -= $quantiteLivraison;
                }
            }
        }
        $this->setResteALivrerProduit($resteALivrerProduit);
   }
}
