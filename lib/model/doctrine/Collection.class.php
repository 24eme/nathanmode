<?php

/**
 * Collection
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    nathanmode
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Collection extends BaseCollection
{
    public function getPath($name, $absolute = false) {
        if($this->$name) {

            return CollectionTable::getInstance()->getUploadPath($absolute).$this->$name;
        }
    }

    public function isInRetardDespiteTimeExtension($date) {
      $retard = null;
      foreach ($this->getCollectionRetards() as $collectionRetard) {
        if (!$retard||$collectionRetard->getDate() > $retard) {
          $retard = $collectionRetard->getDate();
        }
      }
      return ($retard)? ($date >= $retard) : false;
    }

    public function getMetrageRestantALivrer() {
      return $this->getRestantALivrer('metrage');
    }

    public function getPFRestantALivrer() {
      return $this->getRestantALivrer('piece');
    }

    private function getRestantALivrer($attr) {
      $quantiteEntree = 0;
      $quantiteSortie = 0;
      foreach ($this->getCollectionDetails() as $collectionDetail) {
          $val = $collectionDetail->get($attr);
          if (!is_numeric($val)) continue;
          $quantiteEntree += $val;
      }
      foreach ($this->getCollectionLivraisons() as $collectionLivraison) {
          $val = $collectionLivraison->get($attr);
          if (!is_numeric($val)) continue;
          $quantiteSortie += $val;
      }
      return $quantiteEntree - $quantiteSortie;
    }


    public function delete(Doctrine_Connection $conn = null)
    {

    	foreach ($this->getCollectionLivraisons() as $collectionLivraison) {
    		if ($facture = $collectionLivraison->getFacture())
    			$facture->delete();
    	}
    	foreach ($this->getCollectionDetails() as $collectionDetail) {
    		if ($commande = $collectionDetail->getCommande())
    			$commande->delete();
    	}

        parent::delete($conn);

        $this->removeFile('fichier');
        $this->removeFile('fiche_client');
        $this->removeFile('fiche_technique');
        $this->removeFile('fichier_confirmation');
    }

    protected function removeFile($name) {
        if (!$this->$name) {

            return;
        }

        $path = $this->getPath($name, true);

        if(is_file($path)) {
            unlink($path);
        }
    }
    public function save(Doctrine_Connection $conn = null)
    {
	$dateRetardMax = null;
    	foreach ($this->getCollectionRetards() as $collectionRetard) {
    		if ($date = $collectionRetard->getDate()) {
			if (!$dateRetardMax) {
				$dateRetardMax = $date;
			}
			else {
				if ($date > $dateRetardMax) {
					$dateRetardMax = $date;
				}
			}
    		}
    	}
	$this->date_retard = $dateRetardMax;
        parent::save($conn);
    	foreach ($this->getCollectionLivraisons() as $collectionLivraison) {
    		if ($facture = $collectionLivraison->getFacture()) {
	    		if ($this->getProduction() && $facture->getRelation() != Facture::TYPE_PRODUCTION) {
	    			$facture->setRelation(Facture::TYPE_PRODUCTION);
	    			$facture->save();
	    		} elseif (!$this->getProduction() && $facture->getRelation() != Facture::TYPE_COLLECTION) {
	    			$facture->setRelation(Facture::TYPE_COLLECTION);
	    			$facture->save();
	    		}
    		}
    	}
    	foreach ($this->getCollectionDetails() as $collectionDetail) {
    		if ($commande = $collectionDetail->getCommande()) {
    			if ($this->getProduction() && $commande->getRelation() != Commande::TYPE_PRODUCTION) {
    				$commande->setRelation(Commande::TYPE_PRODUCTION);
    				$commande->setSituation($this->getSituation());
    				$commande->save();
    			} elseif (!$this->getProduction() && $commande->getRelation() != Commande::TYPE_COLLECTION) {
    				$commande->setRelation(Commande::TYPE_COLLECTION);
    				$commande->setSituation($this->getSituation());
    				$commande->save();
    			}
    		}
    	}
    }
}
